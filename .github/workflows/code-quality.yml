name: Code Quality Checks

on:
  workflow_call:
    inputs:
      update-coverage-badge:
        required: false
        default: false
        type: boolean

env:
  DOCKER_IMAGE_NAME: justushildebrand/python-cuda:3.9-cuda11.8
  DOCKER_IMAGE_PATH: ~/docker-image-justushildebrand-python-cuda-3-9-cuda11-8.tar.gz

jobs:
  black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout out repository
        uses: actions/checkout@v4
      - name: Setup up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'
      - name: Analysing the code with black
        shell: bash
        run: |
          python -m pip install black
          black src --check --verbose --diff --color --line-length 120
          black test --check --verbose --diff --color --line-length 120
  mypy:
    runs-on: ubuntu-latest
    steps:
      - name: Show disk usage
        run: |
          df -h
          cd
          pwd
      - name: Delete huge unnecessary tools folder
        run: |
          rm -rf /opt/hostedtoolcache
          rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc
      - name: Show disk usage
        run: df -h
      - name: Checkout out repository
        uses: actions/checkout@v4
      - name: Cache Docker image
        uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ runner.os }}-${{ env.DOCKER_IMAGE_NAME }}
      - name: Analysing the code with mypy
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.DOCKER_IMAGE_NAME }}
          options: -v ${{ github.workspace }}:/github/workspace
          shell: bash
          run: |
            source /root/venv/bin/activate
            cd /github/workspace/
            python -m pip install --upgrade .'[dev, docs]'
            mypy . --warn-unused-ignores --show-error-codes --no-incremental
      - name: Show disk usage
        run: df -h
      - name: Clean up potential remnants of past jobs
        uses: AutoModality/action-clean@v1.1.0
      - name: Show disk usage
        run: df -h
  pylint:
    runs-on: ubuntu-latest
    steps:
      - name: Show disk usage
        run: df -h
      - name: Delete huge unnecessary tools folder
        run: |
          rm -rf /opt/hostedtoolcache
          rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc
      - name: Show disk usage
        run: df -h
      - name: Checkout out repository
        uses: actions/checkout@v4
      - name: Cache Docker image
        uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ runner.os }}-${{ env.DOCKER_IMAGE_NAME }}
      - name: Analysing the code with pylint
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.DOCKER_IMAGE_NAME }}
          options: -v ${{ github.workspace }}:/github/workspace
          shell: bash
          run: |
            source /root/venv/bin/activate
            cd /github/workspace/
            python -m pip install --upgrade .'[dev, docs]'
            pylint src --rcfile=.rcfile
            pylint test --rcfile=.rcfile --disable duplicate-code --disable missing-function-docstring
      - name: Show disk usage
        run: df -h
      - name: Clean up potential remnants of past jobs
        uses: AutoModality/action-clean@v1.1.0
      - name: Show disk usage
        run: df -h
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Show disk usage
        run: df -h
      - name: Delete huge unnecessary tools folder
        run: |
          rm -rf /opt/hostedtoolcache
          rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc
      - name: Show disk usage
        run: df -h
      - name: Clean up potential remnants of past jobs
        uses: AutoModality/action-clean@v1.1.0
      - name: Checkout out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Cache Docker image
        uses: actions/cache@v4
        id: cache
        with:
          path: ${{ env.DOCKER_IMAGE_PATH }}
          key: docker-${{ runner.os }}-${{ env.DOCKER_IMAGE_NAME }}
      - name: Pull Docker image
        if: steps.cache.outputs.cache-hit != 'true'
        run: docker pull ${{ env.DOCKER_IMAGE_NAME }}
      - name: Load Docker image
        if: steps.cache.outputs.cache-hit == 'true'
        run: docker load --input ${{ env.DOCKER_IMAGE_NAME }}
      - name: Cache Docker image
        uses: ScribeMD/docker-cache@0.5.0
        with:
          key: docker-${{ runner.os }}-${{ env.DOCKER_IMAGE_NAME }}
      - name: Executing tests
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.DOCKER_IMAGE_NAME }}
          options: -v ${{ github.workspace }}:/github/workspace
          shell: bash
          run: |
            source /root/venv/bin/activate
            cd /github/workspace/
            python -m pip install --upgrade -e .'[dev, docs]'
            coverage run --omit=test/* -m pytest
            coverage-badge -f -o coverage.svg
      - name: Commit coverage badge
        if: ${{ inputs.update-coverage-badge == true }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add coverage.svg
          git pull
          git commit -m "ci: update coverage badge [${{ github.event.pull_request.title }}] [skip-ci]" --allow-empty
          git push
      - name: Show disk usage
        run: df -h
      - name: Clean up potential remnants of past jobs
        uses: AutoModality/action-clean@v1.1.0
      - name: Show disk usage
        run: |
          df -h
          pwd
          cd
          pwd
      - name: Delete huge unnecessary tools folder
        run: |
          ls /home/runner/work
          ls /home/runner -a
          ls -a /home/runner/.docker
          ls -a /home/runner/work/pointtree
          docker image ls
          docker rmi $(docker images --filter=reference="node*" -q)
          docker image ls
      - name: Show disk usage
        run: |
          df -h
          pwd
          cd
          pwd
      - name: Debug logs
        run: |
          pwd
          cd
          ls
      - name: Save Docker image in Cache
        if: steps.cache.outputs.cache-hit != 'true'
        run: docker save --output ${{ env.DOCKER_IMAGE_PATH }} ${{ env.DOCKER_IMAGE_NAME }}
