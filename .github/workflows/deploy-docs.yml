# This workflow deploys the package documentation on GitHub Pages when a new package release is published
name: Deploy documentation

on:
  release:
    types: [published]
  push:
    branches:
      - main

  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: deploy-docs
  cancel-in-progress: false

jobs:
  deploy-docs:
    if: github.repository == 'ai4trees/pointtree'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    container:
      image: justushildebrand/python-cuda:3.9-cuda11.7
      volumes:
        - ${{ github.workspace }}:/github/workspace
    steps:
      - name: Clean up potential remnants of past jobs
        uses: AutoModality/action-clean@v1.1.0
      - name: Checkout out repository at workflow sha
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Prepare docs build
        shell: bash
        run: |
          source /root/venv/bin/activate
          cd /github/workspace/
          git config --global --add safe.directory $(realpath .)
          rm -rf all_builds
          mkdir all_builds
          rm -rf build
          rclone config create --non-interactive docs-cloud webdav url=${{ secrets.DOCS_CLOUD_URL }} \
            pass=${{ secrets.DOCS_CLOUD_PASSWORD }} vendor={{ secrets.DOCS_CLOUD_VENDOR }} \
            user={{ secrets.DOCS_CLOUD_USER }}
          rclone copy docs-cloud:pointtree-docs/ all_builds
          python -m pip install --upgrade -e .'[dev, docs]'
      - name: Build docs for package release
        if: ${{ github.event_name == 'release' }}
        shell: bash
        run: |
          cd docs
          latest_version=$(git tag -l "v[0-9]*\.[0-9]*\.[0-9]*" | sort | tail -1)
          git checkout "$latest_version"
          git branch -a
          echo ${{ github.ref_name }}
          git checkout main -- ./source/conf.py
          git checkout main -- ./source/apidoc_templates/version.html
          make clean
          make html
          mv build/html "all_builds/$latest_version"
          cp ./source/apidoc_templates/404.html all_builds/404.html
          sed -i -e "s/LATEST_VERSION = \"v0.0.0\";/$latest_version/g" all_builds/404.html
          rclone sync all_builds docs-cloud:pointtree-docs
      - name: Build docs for main branch
        if: ${{ github.event_name != 'release' }} # ${{ github.event_name == 'push' }} && ${{ github.ref_name == 'main'}}
        shell: bash
        run: |
          echo ${{ github.event_name }}
          cd docs
          echo ${{ github.ref_name }}
          git checkout ${{ github.ref_name }}
          make clean
          make html
          mv build/html "all_builds/main"
          rclone sync all_builds docs-cloud:pointtree-docs
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: './docs/all_builds'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
